start
    : external_declaration start
    | '$'
    ;

external_declaration
    : function_implement
    | declaration
    ;

declaration_assign
    : '=' expression
    | '$'
    ;

expression
    : constant_expression
    | function_expression
    ;

expression_profix
    : ',' expression expression_profix
    | '$'
    ;

expression_list
    : expression expression_profix
    | '$'
    ;

type_specifier
    : int
    ;

declaration
    : type_specifier declaration_init declaration_init_list ';'
    ;

declaration_init
    : identifier declaration_assign
    ;

declaration_init_list
    : ',' declaration_init declaration_init_list
    | '$'
    ;

function_declaration
    : type_specifier identifier
    ;

function_declaration_suffix
    : ',' function_declaration function_declaration_suffix
    | '$'
    ;

function_declaration_list
    : function_declaration function_declaration_suffix
    | '$'
    ;

function_definition
    : function type_specifier identifier '(' function_declaration_list ')'
    ;

function_implement
    : function_definition compound_statement
    ;

primary_expression
     : identifier
     | number
     | '(' expression ')'
     ;

operator
    : '+'
    | '-'
    | '*'
    | '/'
    | '%'
    | '<'
    | '>'
    | '=='
    | '!='
    ;

assignment_operator
    : '='
    | '+' '='
    | '-' '='
    | '*' '='
    | '/' '='
    | '%' '='
    ;

arithmetic_expression
    : operator primary_expression arithmetic_expression
    | '$'
    ;

constant_expression
    : primary_expression arithmetic_expression
    ;

assignment_expression
    :identifier assignment_operator expression
    ;

assignment_expression_profix
    : ',' assignment_expression assignment_expression_profix
    | '$'
    ;

assignment_expression_list
    : assignment_expression assignment_expression_profix
    | '$'
    ;

function_expression
    : function identifier '(' expression_list ')'
    ;

statement_list
    : statement statement_list
    | '$'
    ;

statement
    : expression_statement
    : jump_statement
    : selection_statement
    : iteration_statement
    : compound_statement
    : declaration
    ;

expression_statement
    : assignment_expression_list ';'
    ;

jump_statement
    : continue ';'
    | break ';'
    | return expression ';'
    ;

selection_statement
    : if '(' expression ')' statement else statement
    ;

iteration_statement
    : while '(' expression ')' statement
    | for '(' declaration expression ';' assignment_expression ')' statement
    ;

compound_statement
    : '{' statement_list '}'
    ;